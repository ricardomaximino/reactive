package com.brasajava.reativeone.api.controller;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.brasajava.reativeone.domain.entity.Lead;
import com.brasajava.reativeone.service.LeadService;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@RestController
@RequestMapping("/controller/leads")
public class LeadController {

	private LeadService service;

	public LeadController(LeadService service) {
		this.service = service;
	}

	@GetMapping("/hello")
	public String hello() {
		return "Hello world from controller !!!";
	}

	@GetMapping
	public ResponseEntity<Flux<Lead>> findAllLeads() {
		return ResponseEntity.ok(service.findAllLeads());
	}

	@GetMapping("/{id}")
	public ResponseEntity<Mono<Lead>> findLeadById(@PathVariable String id) {
		return ResponseEntity.ok(service.findLeadById(id));
	}

	@PostMapping
	public Mono<ResponseEntity<Lead>> createLead(@RequestBody Lead lead) {
		return service.create(lead).map(l -> {
			return ResponseEntity.status(HttpStatus.CREATED).body(l);
		});
	}

	@PutMapping("/{id}")
	public Mono<ResponseEntity<Void>> updateLead(@PathVariable String id, @RequestBody Lead lead) {
		return service.update(id, lead).map(l -> ResponseEntity.noContent().build());
	}

	@PatchMapping("/{id}")
	public Mono<ResponseEntity<Void>> updateWithPatchLead(@PathVariable String id, @RequestBody Object patchObject) {
		return service.updateWithPatch(id, patchObject).map(l -> ResponseEntity.noContent().build());
	}

	@DeleteMapping("/{id}")
	public Mono<ResponseEntity<Void>> deleteLeadById(@PathVariable String id) {
		return service.deleteLeadById(id).map(d -> ResponseEntity.noContent().build()).defaultIfEmpty(Mono.just(ResponseEntity.noContent().build())));
	}
}
